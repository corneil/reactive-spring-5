buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}



apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}


configurations {
    if (webServer != 'Default') {
        compile.exclude module: 'spring-boot-starter-reactor-netty'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile 'io.github.microutils:kotlin-logging:1.5.4'
    if (webServer == 'Jetty') {
        compile 'org.springframework.boot:spring-boot-starter-jetty'
        runtime 'org.eclipse.jetty:jetty-alpn-conscrypt-server'
        runtime 'org.eclipse.jetty.http2:http2-server'
    } else if (webServer == 'Undertow') {
        compile 'org.springframework.boot:spring-boot-starter-undertow'
    } else if (webServer == 'Tomcat') {
        compile 'org.springframework.boot:spring-boot-starter-tomcat'
    }
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.projectreactor:reactor-test'
}
